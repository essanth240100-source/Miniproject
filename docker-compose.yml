version: '3.8'

services:
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: travel_organizer_db
    environment:
      POSTGRES_DB: travel_organizer
      POSTGRES_USER: travel_user
      POSTGRES_PASSWORD: travel_password
    volumes:
      - postgres_data:/var/lib/postgresql/data
    ports:
      - "5432:5432"
    networks:
      - travel_network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U travel_user -d travel_organizer"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Backend Node.js Application
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: travel_organizer_backend
    environment:
      - NODE_ENV=production
      - DB_USERNAME=travel_user
      - DB_PASSWORD=travel_password
      - DB_HOST=postgres
      - DB_PORT=5432
      - DB_NAME=travel_organizer
      - GOOGLE_CALENDAR_ENABLED=false
    ports:
      - "8081:8080"
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      - travel_network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # Frontend Nginx Application
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    container_name: travel_organizer_frontend
    ports:
      - "3000:80"
    depends_on:
      - backend
    networks:
      - travel_network
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost/health"]
      interval: 30s
      timeout: 10s
      retries: 3

volumes:
  postgres_data:
    driver: local

networks:
  travel_network:
    driver: bridge
